#!/usr/bin/env python
"""
Service d'analyse automatique des donn√©es capteurs Arduino
Se d√©clenche automatiquement quand de nouvelles donn√©es arrivent
"""
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, List
from django.utils import timezone
from django.db import transaction

from .models import (
    CapteurArduino, MesureArduino, Zone, EvenementExterne,
    FusionDonnees, PredictionEnrichie, AlerteEnrichie
)

logger = logging.getLogger(__name__)


class AnalyseAutomatiqueService:
    """Service d'analyse automatique des donn√©es capteurs"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def analyser_nouvelles_donnees(self, capteur_id: int = None) -> Dict:
        """
        Analyse automatiquement les derni√®res donn√©es des capteurs
        
        Args:
            capteur_id: ID du capteur sp√©cifique (optionnel)
            
        Returns:
            Dict avec les r√©sultats de l'analyse
        """
        try:
            self.logger.info("üîç D√©but de l'analyse automatique des donn√©es")
            
            # R√©cup√©rer les derni√®res donn√©es
            donnees_recentes = self._recuperer_donnees_recentes(capteur_id)
            
            if not donnees_recentes:
                return {"success": False, "message": "Aucune donn√©e r√©cente trouv√©e"}
            
            # Analyser chaque zone
            resultats = []
            for zone, donnees in donnees_recentes.items():
                analyse = self._analyser_zone(zone, donnees)
                if analyse:
                    resultats.append(analyse)
            
            # G√©n√©rer des alertes si n√©cessaire
            alertes_generees = self._generer_alertes_automatiques(resultats)
            
            self.logger.info(f"‚úÖ Analyse termin√©e: {len(resultats)} zones analys√©es, {len(alertes_generees)} alertes g√©n√©r√©es")
            
            return {
                "success": True,
                "zones_analysees": len(resultats),
                "alertes_generees": len(alertes_generees),
                "resultats": resultats,
                "alertes": alertes_generees
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'analyse automatique: {e}")
            return {"success": False, "message": f"Erreur: {str(e)}"}
    
    def _recuperer_donnees_recentes(self, capteur_id: int = None) -> Dict:
        """R√©cup√®re les donn√©es r√©centes des capteurs (derni√®res 2 heures)"""
        try:
            # P√©riode de 2 heures
            depuis = timezone.now() - timedelta(hours=2)
            
            # Filtrer les capteurs
            if capteur_id:
                capteurs = CapteurArduino.objects.filter(id=capteur_id, actif=True)
            else:
                capteurs = CapteurArduino.objects.filter(actif=True)
            
            donnees_par_zone = {}
            
            for capteur in capteurs:
                zone = capteur.zone
                if zone not in donnees_par_zone:
                    donnees_par_zone[zone] = {
                        'capteurs': [],
                        'mesures': [],
                        'evenements': []
                    }
                
                # Ajouter le capteur
                donnees_par_zone[zone]['capteurs'].append(capteur)
                
                # R√©cup√©rer les mesures r√©centes
                mesures = MesureArduino.objects.filter(
                    capteur=capteur,
                    timestamp__gte=depuis,
                    est_valide=True
                ).order_by('-timestamp')
                
                donnees_par_zone[zone]['mesures'].extend(mesures)
            
            # R√©cup√©rer les √©v√©nements externes r√©cents
            evenements = EvenementExterne.objects.filter(
                date_evenement__gte=depuis,
                is_valide=True
            ).order_by('-date_evenement')
            
            for evenement in evenements:
                if evenement.zone:
                    if evenement.zone not in donnees_par_zone:
                        donnees_par_zone[evenement.zone] = {
                            'capteurs': [],
                            'mesures': [],
                            'evenements': []
                        }
                    donnees_par_zone[evenement.zone]['evenements'].append(evenement)
            
            return donnees_par_zone
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la r√©cup√©ration des donn√©es: {e}")
            return {}
    
    def _analyser_zone(self, zone: Zone, donnees: Dict) -> Optional[Dict]:
        """Analyse les donn√©es d'une zone sp√©cifique"""
        try:
            mesures = donnees['mesures']
            evenements = donnees['evenements']
            
            if not mesures and not evenements:
                return None
            
            # Calculer les statistiques des mesures
            stats_mesures = self._calculer_statistiques_mesures(mesures)
            
            # Analyser les √©v√©nements
            stats_evenements = self._analyser_evenements(evenements)
            
            # Calculer le score d'√©rosion
            score_erosion = self._calculer_score_erosion(stats_mesures, stats_evenements)
            
            # D√©terminer le niveau de risque
            niveau_risque = self._determiner_niveau_risque(score_erosion)
            
            # Cr√©er une fusion de donn√©es
            fusion = self._creer_fusion_donnees(zone, stats_mesures, stats_evenements, score_erosion)
            
            # G√©n√©rer une pr√©diction
            prediction = self._generer_prediction_automatique(fusion, niveau_risque)
            
            return {
                "zone_id": zone.id,
                "zone_nom": zone.nom,
                "score_erosion": score_erosion,
                "niveau_risque": niveau_risque,
                "nb_mesures": len(mesures),
                "nb_evenements": len(evenements),
                "fusion_id": fusion.id if fusion else None,
                "prediction_id": prediction.id if prediction else None,
                "stats_mesures": stats_mesures,
                "stats_evenements": stats_evenements
            }
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'analyse de la zone {zone.nom}: {e}")
            return None
    
    def _calculer_statistiques_mesures(self, mesures: List[MesureArduino]) -> Dict:
        """Calcule les statistiques des mesures"""
        if not mesures:
            return {}
        
        # Grouper par type de mesure
        mesures_par_type = {}
        for mesure in mesures:
            unite = mesure.unite
            if unite not in mesures_par_type:
                mesures_par_type[unite] = []
            mesures_par_type[unite].append(mesure.valeur)
        
        stats = {}
        for unite, valeurs in mesures_par_type.items():
            if valeurs:
                stats[unite] = {
                    'moyenne': sum(valeurs) / len(valeurs),
                    'min': min(valeurs),
                    'max': max(valeurs),
                    'count': len(valeurs),
                    'derniere_valeur': valeurs[0]  # Premi√®re = plus r√©cente (tri√© par -timestamp)
                }
        
        return stats
    
    def _analyser_evenements(self, evenements: List[EvenementExterne]) -> Dict:
        """Analyse les √©v√©nements externes"""
        if not evenements:
            return {}
        
        # Compter par type d'√©v√©nement
        types_evenements = {}
        for event in evenements:
            type_event = event.type_evenement
            if type_event not in types_evenements:
                types_evenements[type_event] = {
                    'count': 0,
                    'intensite_moyenne': 0,
                    'niveau_risque_max': 'faible'
                }
            
            types_evenements[type_event]['count'] += 1
            types_evenements[type_event]['intensite_moyenne'] += event.intensite
            
            # D√©terminer le niveau de risque max
            if event.niveau_risque == 'critique':
                types_evenements[type_event]['niveau_risque_max'] = 'critique'
            elif event.niveau_risque == 'eleve' and types_evenements[type_event]['niveau_risque_max'] != 'critique':
                types_evenements[type_event]['niveau_risque_max'] = 'eleve'
            elif event.niveau_risque == 'modere' and types_evenements[type_event]['niveau_risque_max'] not in ['critique', 'eleve']:
                types_evenements[type_event]['niveau_risque_max'] = 'modere'
        
        # Calculer les moyennes
        for type_event in types_evenements:
            count = types_evenements[type_event]['count']
            types_evenements[type_event]['intensite_moyenne'] /= count
        
        return types_evenements
    
    def _calculer_score_erosion(self, stats_mesures: Dict, stats_evenements: Dict) -> float:
        """Calcule un score d'√©rosion bas√© sur les donn√©es"""
        score = 0.0
        
        # Facteur temp√©rature (si disponible)
        if '¬∞C' in stats_mesures:
            temp = stats_mesures['¬∞C']['moyenne']
            if temp > 30:  # Temp√©rature √©lev√©e = risque accru
                score += (temp - 30) * 2
        
        # Facteur humidit√© (si disponible)
        if '%' in stats_mesures:
            hum = stats_mesures['%']['moyenne']
            if hum > 80:  # Humidit√© √©lev√©e = risque accru
                score += (hum - 80) * 0.5
        
        # Facteur √©v√©nements
        for type_event, stats in stats_evenements.items():
            intensite = stats['intensite_moyenne']
            count = stats['count']
            
            # Pond√©ration selon le type d'√©v√©nement
            if type_event in ['tempete', 'ouragan', 'cyclone']:
                score += intensite * count * 3
            elif type_event in ['vent_fort', 'houle']:
                score += intensite * count * 2
            elif type_event == 'pluie':
                score += intensite * count * 1.5
            else:
                score += intensite * count * 1
        
        return min(score, 100.0)  # Limiter √† 100
    
    def _determiner_niveau_risque(self, score_erosion: float) -> str:
        """D√©termine le niveau de risque bas√© sur le score"""
        if score_erosion >= 80:
            return 'critique'
        elif score_erosion >= 60:
            return 'eleve'
        elif score_erosion >= 30:
            return 'modere'
        else:
            return 'faible'
    
    def _creer_fusion_donnees(self, zone: Zone, stats_mesures: Dict, stats_evenements: Dict, score_erosion: float) -> Optional[FusionDonnees]:
        """Cr√©e une fusion de donn√©es pour la zone"""
        try:
            # Calculer la probabilit√© d'√©rosion
            probabilite_erosion = min(score_erosion / 100.0, 1.0)
            
            # Identifier les facteurs dominants
            facteurs_dominants = []
            if '¬∞C' in stats_mesures and stats_mesures['¬∞C']['moyenne'] > 30:
                facteurs_dominants.append('temperature_elevee')
            if '%' in stats_mesures and stats_mesures['%']['moyenne'] > 80:
                facteurs_dominants.append('humidite_elevee')
            
            for type_event in stats_evenements:
                if stats_evenements[type_event]['count'] > 0:
                    facteurs_dominants.append(f'evenement_{type_event}')
            
            # D√©terminer le niveau de risque
            niveau_risque = self._determiner_niveau_risque(score_erosion)
            
            # Cr√©er un √©v√©nement virtuel pour l'analyse automatique
            evenement_virtuel, _ = EvenementExterne.objects.get_or_create(
                type_evenement='autre',  # Utiliser 'autre' au lieu de 'analyse_automatique'
                zone=zone,
                date_evenement=timezone.now(),
                defaults={
                    'intensite': score_erosion / 10,  # Intensit√© bas√©e sur le score
                    'niveau_risque': niveau_risque,
                    'duree': '2h',  # Dur√©e par d√©faut
                    'statut': 'recu',
                    'source': 'api',
                    'is_valide': True,
                    'is_traite': True
                }
            )
            
            # Cr√©er la fusion
            fusion = FusionDonnees.objects.create(
                zone=zone,
                evenement_externe=evenement_virtuel,
                periode_debut=timezone.now() - timedelta(hours=2),
                periode_fin=timezone.now(),
                mesures_arduino_count=sum(len(valeurs) for valeurs in stats_mesures.values() if isinstance(valeurs, dict) and 'count' in valeurs),
                evenements_externes_count=sum(stats['count'] for stats in stats_evenements.values()),
                score_erosion=score_erosion,
                probabilite_erosion=probabilite_erosion,
                facteurs_dominants=facteurs_dominants,
                statut='terminee',
                date_fin=timezone.now(),
                commentaires=f"Analyse automatique - Score: {score_erosion:.1f}"
            )
            
            return fusion
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la cr√©ation de la fusion: {e}")
            return None
    
    def _generer_prediction_automatique(self, fusion: FusionDonnees, niveau_risque: str) -> Optional[PredictionEnrichie]:
        """G√©n√®re une pr√©diction automatique bas√©e sur la fusion"""
        try:
            # D√©terminer si √©rosion pr√©dite
            erosion_predite = fusion.probabilite_erosion > 0.5
            
            # Calculer la confiance
            confiance_pourcentage = min(fusion.score_erosion, 95.0)
            
            # Calculer le taux d'√©rosion pr√©dit
            taux_erosion_pred = fusion.score_erosion * 0.01  # Convertir en m/an
            
            # G√©n√©rer des recommandations
            recommandations = self._generer_recommandations(niveau_risque, fusion.facteurs_dominants)
            
            # Cr√©er la pr√©diction
            prediction = PredictionEnrichie.objects.create(
                zone=fusion.zone,
                fusion_donnees=fusion,
                erosion_predite=erosion_predite,
                niveau_erosion=niveau_risque,
                confiance_pourcentage=confiance_pourcentage,
                horizon_jours=7,
                taux_erosion_pred_m_an=taux_erosion_pred,
                facteur_evenements=fusion.score_erosion * 0.4,
                facteur_mesures_arduino=fusion.score_erosion * 0.3,
                facteur_historique=fusion.score_erosion * 0.1,
                recommandations=recommandations,
                actions_urgentes=[],
                modele_utilise="Mod√®le automatique multi-facteurs",
                parametres_modele={
                    'score_erosion': fusion.score_erosion,
                    'probabilite_erosion': fusion.probabilite_erosion,
                    'facteurs_dominants': fusion.facteurs_dominants
                },
                commentaires=f"Pr√©diction g√©n√©r√©e automatiquement - Score: {fusion.score_erosion:.1f}"
            )
            
            return prediction
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la g√©n√©ration de la pr√©diction: {e}")
            return None
    
    def _generer_recommandations(self, niveau_risque: str, facteurs_dominants: List[str]) -> List[str]:
        """G√©n√®re des recommandations bas√©es sur le niveau de risque et les facteurs"""
        recommandations = []
        
        if niveau_risque == 'critique':
            recommandations.extend([
                "üö® ALERTE CRITIQUE - Surveillance renforc√©e requise",
                "üìû Contacter les autorit√©s locales imm√©diatement",
                "üöß Mettre en place des mesures de protection d'urgence"
            ])
        elif niveau_risque == 'eleve':
            recommandations.extend([
                "‚ö†Ô∏è Risque √©lev√© d√©tect√© - Surveillance accrue",
                "üìä Analyser les tendances des derni√®res heures",
                "üõ°Ô∏è Pr√©parer des mesures de protection"
            ])
        elif niveau_risque == 'modere':
            recommandations.extend([
                "üìà Risque mod√©r√© - Continuer la surveillance",
                "üìã Documenter les conditions actuelles",
                "üîç Surveiller l'√©volution des param√®tres"
            ])
        else:
            recommandations.extend([
                "‚úÖ Conditions normales - Surveillance de routine",
                "üìä Maintenir la collecte de donn√©es",
                "üîÑ Continuer le monitoring r√©gulier"
            ])
        
        # Recommandations sp√©cifiques aux facteurs
        if 'temperature_elevee' in facteurs_dominants:
            recommandations.append("üå°Ô∏è Temp√©rature √©lev√©e - Surveiller l'impact sur l'√©rosion")
        
        if 'humidite_elevee' in facteurs_dominants:
            recommandations.append("üíß Humidit√© √©lev√©e - Risque d'√©rosion hydrique")
        
        if any('evenement_' in f for f in facteurs_dominants):
            recommandations.append("üå™Ô∏è √âv√©nements m√©t√©o d√©tect√©s - Surveillance renforc√©e")
        
        return recommandations
    
    def _generer_alertes_automatiques(self, resultats: List[Dict]) -> List[Dict]:
        """G√©n√®re des alertes automatiques si n√©cessaire"""
        alertes_generees = []
        
        for resultat in resultats:
            if resultat['niveau_risque'] in ['eleve', 'critique']:
                try:
                    zone = Zone.objects.get(id=resultat['zone_id'])
                    
                    # Cr√©er une alerte enrichie
                    alerte = AlerteEnrichie.objects.create(
                        zone=zone,
                        prediction_enrichie_id=resultat.get('prediction_id'),
                        type='erosion_predite',
                        niveau=resultat['niveau_risque'],
                        titre=f"üö® Alerte √©rosion - {zone.nom}",
                        description=f"Risque d'√©rosion {resultat['niveau_risque']} d√©tect√©. Score: {resultat['score_erosion']:.1f}",
                        est_active=True,
                        actions_requises=[
                            "Surveillance renforc√©e",
                            "Analyse des donn√©es en temps r√©el",
                            "Pr√©paration des mesures de protection"
                        ],
                        donnees_contexte={
                            'score_erosion': resultat['score_erosion'],
                            'nb_mesures': resultat['nb_mesures'],
                            'nb_evenements': resultat['nb_evenements'],
                            'facteurs_dominants': resultat['stats_evenements']
                        }
                    )
                    
                    alertes_generees.append({
                        'alerte_id': alerte.id,
                        'zone': zone.nom,
                        'niveau': resultat['niveau_risque'],
                        'titre': alerte.titre
                    })
                    
                except Exception as e:
                    self.logger.error(f"Erreur lors de la cr√©ation de l'alerte: {e}")
        
        return alertes_generees


# Instance globale du service
analyse_service = AnalyseAutomatiqueService()
