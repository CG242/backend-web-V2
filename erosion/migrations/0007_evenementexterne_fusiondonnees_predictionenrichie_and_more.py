# Generated by Django 5.2.7 on 2025-10-14 06:02

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('erosion', '0006_add_humidite_to_mesurearduino'),
    ]

    operations = [
        migrations.CreateModel(
            name='EvenementExterne',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_evenement', models.CharField(choices=[('pluie', 'Pluie'), ('tempete', 'Tempête'), ('vent_fort', 'Vent fort'), ('vague', 'Vague élevée'), ('maree_exceptionnelle', 'Marée exceptionnelle'), ('secheresse', 'Sécheresse'), ('inondation', 'Inondation'), ('tsunami', 'Tsunami'), ('ouragan', 'Ouragan'), ('cyclone', 'Cyclone'), ('autre', 'Autre')], max_length=50)),
                ('intensite', models.FloatField(help_text='Intensité de 0 à 100', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('intensite_categorie', models.CharField(choices=[('faible', 'Faible (0-25%)'), ('moderee', 'Modérée (26-50%)'), ('forte', 'Forte (51-75%)'), ('extreme', 'Extrême (76-100%)')], help_text="Catégorie d'intensité calculée automatiquement", max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_evenement', models.DateTimeField(help_text="Date/heure de l'événement")),
                ('date_reception', models.DateTimeField(auto_now_add=True, help_text='Date/heure de réception par le backend')),
                ('source', models.CharField(help_text="Source de l'événement (ex: MeteoFrance, NOAA)", max_length=100)),
                ('source_id', models.CharField(blank=True, help_text='ID unique dans la source', max_length=100, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Métadonnées supplémentaires')),
                ('duree_minutes', models.PositiveIntegerField(blank=True, help_text='Durée estimée en minutes', null=True)),
                ('rayon_impact_km', models.FloatField(blank=True, help_text="Rayon d'impact en kilomètres", null=True)),
                ('is_simulation', models.BooleanField(default=False, help_text="Marquer si c'est une donnée de test/simulation")),
                ('is_valide', models.BooleanField(default=True, help_text='Événement validé par le système')),
                ('is_traite', models.BooleanField(default=False, help_text='Événement traité pour fusion/analyse')),
                ('commentaires', models.TextField(blank=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('evenements_lies', models.ManyToManyField(blank=True, help_text='Événements liés ou corrélés', to='erosion.evenementexterne')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evenements_externes', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Événement externe',
                'verbose_name_plural': 'Événements externes',
                'ordering': ['-date_evenement'],
            },
        ),
        migrations.CreateModel(
            name='FusionDonnees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periode_debut', models.DateTimeField()),
                ('periode_fin', models.DateTimeField()),
                ('mesures_arduino_count', models.PositiveIntegerField(default=0, help_text='Nombre de mesures Arduino utilisées')),
                ('evenements_externes_count', models.PositiveIntegerField(default=0, help_text="Nombre d'événements externes utilisés")),
                ('score_erosion', models.FloatField(help_text="Score d'érosion calculé (0-100)")),
                ('probabilite_erosion', models.FloatField(help_text="Probabilité d'érosion (0-1)", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('facteurs_dominants', models.JSONField(default=list, help_text='Facteurs les plus influents')),
                ('statut', models.CharField(choices=[('en_cours', 'En cours'), ('terminee', 'Terminée'), ('erreur', 'Erreur'), ('annulee', 'Annulée')], default='en_cours', max_length=20)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_fin', models.DateTimeField(blank=True, null=True)),
                ('commentaires', models.TextField(blank=True)),
                ('evenement_externe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fusions', to='erosion.evenementexterne')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fusions_donnees', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Fusion de données',
                'verbose_name_plural': 'Fusions de données',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='PredictionEnrichie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('erosion_predite', models.BooleanField(help_text='Érosion prédite (True/False)')),
                ('niveau_erosion', models.CharField(choices=[('faible', 'Faible'), ('modere', 'Modéré'), ('eleve', 'Élevé'), ('critique', 'Critique')], max_length=20)),
                ('confiance_pourcentage', models.FloatField(help_text='Niveau de confiance en pourcentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('niveau_confiance', models.CharField(choices=[('faible', 'Faible (< 60%)'), ('moyenne', 'Moyenne (60-80%)'), ('elevee', 'Élevée (80-95%)'), ('tres_elevee', 'Très élevée (> 95%)')], help_text='Catégorie de confiance calculée automatiquement', max_length=20)),
                ('horizon_jours', models.PositiveIntegerField(help_text='Horizon de prédiction en jours')),
                ('taux_erosion_pred_m_an', models.FloatField(help_text="Taux d'érosion prédit en m/an")),
                ('facteur_evenements', models.FloatField(blank=True, help_text='Contribution des événements externes', null=True)),
                ('facteur_mesures_arduino', models.FloatField(blank=True, help_text='Contribution des mesures Arduino', null=True)),
                ('facteur_historique', models.FloatField(blank=True, help_text="Contribution de l'historique", null=True)),
                ('recommandations', models.JSONField(default=list, help_text='Recommandations générées')),
                ('actions_urgentes', models.JSONField(default=list, help_text='Actions urgentes recommandées')),
                ('modele_utilise', models.CharField(default='Modèle enrichi multi-facteurs', max_length=100)),
                ('parametres_modele', models.JSONField(blank=True, default=dict)),
                ('date_prediction', models.DateTimeField(auto_now_add=True)),
                ('commentaires', models.TextField(blank=True)),
                ('fusion_donnees', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions_enrichies', to='erosion.fusiondonnees')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions_enrichies', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Prédiction enrichie',
                'verbose_name_plural': 'Prédictions enrichies',
                'ordering': ['-date_prediction'],
            },
        ),
        migrations.CreateModel(
            name='AlerteEnrichie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('erosion_predite', 'Érosion prédite'), ('evenement_extreme', 'Événement extrême'), ('donnees_anormales', 'Données anormales'), ('capteur_defaillant', 'Capteur défaillant'), ('fusion_echec', 'Échec de fusion'), ('prediction_incertaine', 'Prédiction incertaine')], max_length=30)),
                ('niveau', models.CharField(choices=[('info', 'Information'), ('attention', 'Attention'), ('alerte', 'Alerte'), ('critique', 'Critique'), ('urgence', 'Urgence')], max_length=20)),
                ('titre', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('est_active', models.BooleanField(default=True)),
                ('est_resolue', models.BooleanField(default=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_resolution', models.DateTimeField(blank=True, null=True)),
                ('actions_requises', models.JSONField(default=list, help_text='Actions requises')),
                ('donnees_contexte', models.JSONField(default=dict, help_text='Données contextuelles')),
                ('commentaires', models.TextField(blank=True)),
                ('utilisateur_resolution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alertes_enrichies_resolues', to=settings.AUTH_USER_MODEL)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alertes_enrichies', to='erosion.zone')),
                ('evenement_externe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alertes', to='erosion.evenementexterne')),
                ('prediction_enrichie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alertes', to='erosion.predictionenrichie')),
            ],
            options={
                'verbose_name': 'Alerte enrichie',
                'verbose_name_plural': 'Alertes enrichies',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='ArchiveDonnees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_donnees', models.CharField(choices=[('mesures_arduino', 'Mesures Arduino'), ('evenements_externes', 'Événements externes'), ('fusions', 'Fusions de données'), ('predictions', 'Prédictions'), ('alertes', 'Alertes')], max_length=30)),
                ('periode_debut', models.DateTimeField()),
                ('periode_fin', models.DateTimeField()),
                ('nombre_elements', models.PositiveIntegerField(help_text="Nombre d'éléments archivés")),
                ('taille_fichier_mb', models.FloatField(help_text='Taille du fichier en MB')),
                ('format_archive', models.CharField(default='json', help_text="Format d'archive", max_length=20)),
                ('date_archivage', models.DateTimeField(auto_now_add=True)),
                ('chemin_fichier', models.CharField(help_text="Chemin vers le fichier d'archive", max_length=500)),
                ('est_disponible', models.BooleanField(default=True)),
                ('date_suppression', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('tags', models.JSONField(default=list, help_text='Tags pour classification')),
                ('utilisateur_archivage', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='archives_creees', to=settings.AUTH_USER_MODEL)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archives', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Archive de données',
                'verbose_name_plural': 'Archives de données',
                'ordering': ['-date_archivage'],
                'indexes': [models.Index(fields=['type_donnees', 'zone'], name='erosion_arc_type_do_12cfa3_idx'), models.Index(fields=['periode_debut', 'periode_fin'], name='erosion_arc_periode_340e48_idx'), models.Index(fields=['date_archivage'], name='erosion_arc_date_ar_a9290f_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='evenementexterne',
            index=models.Index(fields=['zone', 'date_evenement'], name='erosion_eve_zone_id_a0caaa_idx'),
        ),
        migrations.AddIndex(
            model_name='evenementexterne',
            index=models.Index(fields=['type_evenement', 'intensite'], name='erosion_eve_type_ev_4fd442_idx'),
        ),
        migrations.AddIndex(
            model_name='evenementexterne',
            index=models.Index(fields=['source', 'date_reception'], name='erosion_eve_source_454282_idx'),
        ),
        migrations.AddIndex(
            model_name='evenementexterne',
            index=models.Index(fields=['is_traite', 'is_valide'], name='erosion_eve_is_trai_e93a09_idx'),
        ),
        migrations.AddIndex(
            model_name='fusiondonnees',
            index=models.Index(fields=['zone', 'date_creation'], name='erosion_fus_zone_id_9903fa_idx'),
        ),
        migrations.AddIndex(
            model_name='fusiondonnees',
            index=models.Index(fields=['statut', 'score_erosion'], name='erosion_fus_statut_4b59d6_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionenrichie',
            index=models.Index(fields=['zone', 'date_prediction'], name='erosion_pre_zone_id_feceff_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionenrichie',
            index=models.Index(fields=['erosion_predite', 'niveau_erosion'], name='erosion_pre_erosion_8d9df6_idx'),
        ),
        migrations.AddIndex(
            model_name='predictionenrichie',
            index=models.Index(fields=['confiance_pourcentage'], name='erosion_pre_confian_673518_idx'),
        ),
        migrations.AddIndex(
            model_name='alerteenrichie',
            index=models.Index(fields=['zone', 'date_creation'], name='erosion_ale_zone_id_3f2adb_idx'),
        ),
        migrations.AddIndex(
            model_name='alerteenrichie',
            index=models.Index(fields=['niveau', 'est_active'], name='erosion_ale_niveau_dc647f_idx'),
        ),
        migrations.AddIndex(
            model_name='alerteenrichie',
            index=models.Index(fields=['type', 'est_resolue'], name='erosion_ale_type_96c5ba_idx'),
        ),
    ]
