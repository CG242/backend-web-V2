# Generated by Django 5.2.7 on 2025-10-06 18:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('geometrie_json', models.TextField(blank=True, help_text='Géométrie JSON de la zone')),
                ('latitude_centre', models.FloatField(blank=True, help_text='Latitude du centre', null=True)),
                ('longitude_centre', models.FloatField(blank=True, help_text='Longitude du centre', null=True)),
                ('superficie_km2', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('niveau_risque', models.CharField(choices=[('faible', 'Faible'), ('modere', 'Modéré'), ('eleve', 'Élevé'), ('critique', 'Critique')], default='faible', max_length=20)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_modification', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Zone',
                'verbose_name_plural': 'Zones',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrateur'), ('scientifique', 'Scientifique'), ('technicien', 'Technicien'), ('observateur', 'Observateur')], default='observateur', max_length=20)),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('organisation', models.CharField(blank=True, max_length=100)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TendanceLongTerme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periode_debut', models.DateTimeField()),
                ('periode_fin', models.DateTimeField()),
                ('taux_erosion_moyen_m_an', models.FloatField()),
                ('tendance', models.CharField(choices=[('croissante', 'Croissante'), ('stable', 'Stable'), ('decroissante', 'Décroissante')], max_length=20)),
                ('facteurs_influence', models.JSONField(blank=True, default=list)),
                ('date_analyse', models.DateTimeField(default=django.utils.timezone.now)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tendances', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Tendance long terme',
                'verbose_name_plural': 'Tendances long terme',
                'ordering': ['-date_analyse'],
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_prediction', models.DateTimeField(default=django.utils.timezone.now)),
                ('horizon_jours', models.IntegerField(help_text='Horizon de prédiction en jours')),
                ('taux_erosion_pred_m_an', models.FloatField(help_text="Taux d'érosion prédit en m/an")),
                ('confiance_pourcentage', models.FloatField(help_text='Niveau de confiance en pourcentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('modele_utilise', models.CharField(max_length=100)),
                ('parametres_modele', models.JSONField(blank=True, default=dict)),
                ('commentaires', models.TextField(blank=True)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Prédiction',
                'verbose_name_plural': 'Prédictions',
                'ordering': ['-date_prediction'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueErosion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_mesure', models.DateTimeField()),
                ('taux_erosion_m_an', models.FloatField(help_text="Taux d'érosion en mètres par an")),
                ('methode_mesure', models.CharField(choices=[('gps', 'GPS'), ('lidar', 'LIDAR'), ('photogrammetrie', 'Photogrammétrie'), ('manuel', 'Mesure manuelle')], max_length=50)),
                ('precision_m', models.FloatField(help_text='Précision de la mesure en mètres')),
                ('commentaires', models.TextField(blank=True)),
                ('utilisateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historique_erosion', to='erosion.zone')),
            ],
            options={
                'verbose_name': "Historique d'érosion",
                'verbose_name_plural': "Historiques d'érosion",
                'ordering': ['-date_mesure'],
            },
        ),
        migrations.CreateModel(
            name='EvenementClimatique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('tempete', 'Tempête'), ('ouragan', 'Ouragan'), ('cyclone', 'Cyclone'), ('tsunami', 'Tsunami'), ('maree_exceptionnelle', 'Marée exceptionnelle'), ('secheresse', 'Sécheresse'), ('inondation', 'Inondation')], max_length=30)),
                ('date_debut', models.DateTimeField()),
                ('date_fin', models.DateTimeField()),
                ('intensite', models.CharField(choices=[('faible', 'Faible'), ('moderee', 'Modérée'), ('forte', 'Forte'), ('extreme', 'Extrême')], max_length=20)),
                ('description', models.TextField()),
                ('impact_erosion_estime', models.FloatField(blank=True, help_text="Impact estimé sur l'érosion en mètres", null=True)),
                ('zones_impactees', models.ManyToManyField(related_name='evenements_climatiques', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Événement climatique',
                'verbose_name_plural': 'Événements climatiques',
                'ordering': ['-date_debut'],
            },
        ),
        migrations.CreateModel(
            name='Capteur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('temperature', 'Température'), ('salinite', 'Salinité'), ('houle', 'Houle'), ('vent', 'Vent'), ('pluviometrie', 'Pluviométrie'), ('niveau_mer', 'Niveau de mer'), ('ph', 'pH'), ('turbidite', 'Turbidité')], max_length=20)),
                ('latitude', models.FloatField(help_text='Latitude du capteur')),
                ('longitude', models.FloatField(help_text='Longitude du capteur')),
                ('etat', models.CharField(choices=[('actif', 'Actif'), ('inactif', 'Inactif'), ('maintenance', 'En maintenance'), ('defaillant', 'Défaillant')], default='actif', max_length=20)),
                ('frequence_mesure_min', models.IntegerField(default=60, help_text='Fréquence de mesure en minutes')),
                ('precision', models.FloatField(help_text='Précision du capteur')),
                ('unite_mesure', models.CharField(max_length=10)),
                ('date_installation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_derniere_maintenance', models.DateTimeField(blank=True, null=True)),
                ('commentaires', models.TextField(blank=True)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='capteurs', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Capteur',
                'verbose_name_plural': 'Capteurs',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Alerte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('erosion_acceleree', 'Érosion accélérée'), ('capteur_defaillant', 'Capteur défaillant'), ('donnee_anormale', 'Donnée anormale'), ('maintenance_requise', 'Maintenance requise'), ('evenement_climatique', 'Événement climatique')], max_length=30)),
                ('niveau', models.CharField(choices=[('info', 'Information'), ('attention', 'Attention'), ('alerte', 'Alerte'), ('critique', 'Critique')], max_length=20)),
                ('titre', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_resolution', models.DateTimeField(blank=True, null=True)),
                ('est_resolue', models.BooleanField(default=False)),
                ('utilisateur_creation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alertes_crees', to=settings.AUTH_USER_MODEL)),
                ('utilisateur_resolution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alertes_resolues', to=settings.AUTH_USER_MODEL)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alertes', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Alerte',
                'verbose_name_plural': 'Alertes',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='JournalAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('creation', 'Création'), ('modification', 'Modification'), ('suppression', 'Suppression'), ('consultation', 'Consultation'), ('export', 'Export'), ('import', 'Import')], max_length=20)),
                ('objet_type', models.CharField(max_length=50)),
                ('objet_id', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('utilisateur', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Journal d'action",
                'verbose_name_plural': 'Journal des actions',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['utilisateur', 'timestamp'], name='erosion_jou_utilisa_76e193_idx'), models.Index(fields=['objet_type', 'objet_id'], name='erosion_jou_objet_t_e18cd5_idx')],
            },
        ),
        migrations.CreateModel(
            name='Mesure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valeur', models.FloatField()),
                ('unite', models.CharField(max_length=10)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('qualite_donnee', models.CharField(choices=[('excellente', 'Excellente'), ('bonne', 'Bonne'), ('moyenne', 'Moyenne'), ('faible', 'Faible'), ('douteuse', 'Douteuse')], default='bonne', max_length=20)),
                ('commentaires', models.TextField(blank=True)),
                ('capteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mesures', to='erosion.capteur')),
            ],
            options={
                'verbose_name': 'Mesure',
                'verbose_name_plural': 'Mesures',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['capteur', 'timestamp'], name='erosion_mes_capteur_4b38e5_idx'), models.Index(fields=['timestamp'], name='erosion_mes_timesta_1ee67b_idx')],
            },
        ),
    ]
