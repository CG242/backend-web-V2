# Generated by Django 5.2.7 on 2025-10-10 13:40

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('erosion', '0004_cleapi_donneesenvironnementales_analyseerosion_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CapteurArduino',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('type_capteur', models.CharField(choices=[('temperature', 'Température'), ('humidite', 'Humidité'), ('pression', 'Pression atmosphérique'), ('luminosite', 'Luminosité'), ('vent_vitesse', 'Vitesse du vent'), ('vent_direction', 'Direction du vent'), ('pluviometrie', 'Pluviométrie'), ('niveau_mer', 'Niveau de mer'), ('salinite', 'Salinité'), ('ph', 'pH'), ('turbidite', 'Turbidité'), ('gps', 'GPS'), ('accelerometre', 'Accéléromètre'), ('gyroscope', 'Gyroscope')], max_length=20)),
                ('position', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('adresse_mac', models.CharField(help_text='Adresse MAC du module ESP32', max_length=17, unique=True)),
                ('adresse_ip', models.GenericIPAddressField(blank=True, help_text='Adresse IP assignée', null=True)),
                ('ssid_wifi', models.CharField(help_text='Nom du réseau Wi-Fi', max_length=50)),
                ('mot_de_passe_wifi', models.CharField(help_text='Mot de passe Wi-Fi (chiffré)', max_length=100)),
                ('frequence_mesure_secondes', models.PositiveIntegerField(default=300, help_text='Fréquence en secondes')),
                ('precision', models.FloatField(help_text='Précision du capteur')),
                ('unite_mesure', models.CharField(max_length=10)),
                ('valeur_min', models.FloatField(blank=True, help_text='Valeur minimale valide', null=True)),
                ('valeur_max', models.FloatField(blank=True, help_text='Valeur maximale valide', null=True)),
                ('etat', models.CharField(choices=[('actif', 'Actif'), ('inactif', 'Inactif'), ('maintenance', 'En maintenance'), ('defaillant', 'Défaillant'), ('hors_ligne', 'Hors ligne'), ('erreur_wifi', 'Erreur Wi-Fi')], default='inactif', max_length=20)),
                ('date_installation', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_derniere_maintenance', models.DateTimeField(blank=True, null=True)),
                ('date_derniere_communication', models.DateTimeField(blank=True, null=True)),
                ('version_firmware', models.CharField(default='1.0.0', max_length=20)),
                ('tension_batterie', models.FloatField(blank=True, help_text='Tension en volts', null=True)),
                ('niveau_signal_wifi', models.IntegerField(blank=True, help_text='Niveau signal Wi-Fi (dBm)', null=True)),
                ('commentaires', models.TextField(blank=True)),
                ('actif', models.BooleanField(default=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_modification', models.DateTimeField(auto_now=True)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='capteurs_arduino', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Capteur Arduino',
                'verbose_name_plural': 'Capteurs Arduino',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='DonneesManquantes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periode_debut', models.DateTimeField()),
                ('periode_fin', models.DateTimeField()),
                ('duree_manque_minutes', models.PositiveIntegerField(help_text='Durée du manque en minutes')),
                ('type_completion', models.CharField(choices=[('interpolation', 'Interpolation linéaire'), ('derniere_valeur', 'Dernière valeur connue'), ('moyenne_mobile', 'Moyenne mobile'), ('valeur_defaut', 'Valeur par défaut'), ('extrapolation', 'Extrapolation')], max_length=20)),
                ('nombre_valeurs_completees', models.PositiveIntegerField(default=0)),
                ('valeurs_completees', models.JSONField(default=list, help_text='Liste des valeurs complétées')),
                ('date_detection', models.DateTimeField(auto_now_add=True)),
                ('date_completion', models.DateTimeField(blank=True, null=True)),
                ('est_completee', models.BooleanField(default=False)),
                ('qualite_completion', models.CharField(choices=[('excellente', 'Excellente'), ('bonne', 'Bonne'), ('moyenne', 'Moyenne'), ('faible', 'Faible'), ('douteuse', 'Douteuse'), ('invalide', 'Invalide'), ('interpolee', 'Interpolée'), ('derniere_connue', 'Dernière valeur connue')], default='moyenne', max_length=20)),
                ('derniere_valeur_connue', models.FloatField(blank=True, null=True)),
                ('derniere_timestamp_connu', models.DateTimeField(blank=True, null=True)),
                ('prochaine_valeur_connue', models.FloatField(blank=True, null=True)),
                ('prochain_timestamp_connu', models.DateTimeField(blank=True, null=True)),
                ('commentaires', models.TextField(blank=True)),
                ('capteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='donnees_manquantes', to='erosion.capteurarduino')),
            ],
            options={
                'verbose_name': 'Données manquantes',
                'verbose_name_plural': 'Données manquantes',
                'ordering': ['-date_detection'],
            },
        ),
        migrations.CreateModel(
            name='LogCapteurArduino',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_evenement', models.CharField(choices=[('connexion', 'Connexion'), ('deconnexion', 'Déconnexion'), ('mesure_recue', 'Mesure reçue'), ('mesure_invalide', 'Mesure invalide'), ('erreur_wifi', 'Erreur Wi-Fi'), ('batterie_faible', 'Batterie faible'), ('maintenance', 'Maintenance'), ('mise_a_jour_firmware', 'Mise à jour firmware'), ('erreur_systeme', 'Erreur système')], max_length=30)),
                ('niveau', models.CharField(choices=[('info', 'Information'), ('attention', 'Attention'), ('erreur', 'Erreur'), ('critique', 'Critique')], default='info', max_length=20)),
                ('message', models.TextField()),
                ('donnees_contexte', models.JSONField(default=dict, help_text="Données contextuelles de l'événement")),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('adresse_ip_source', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=200)),
                ('capteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='erosion.capteurarduino')),
            ],
            options={
                'verbose_name': 'Log Capteur Arduino',
                'verbose_name_plural': 'Logs Capteurs Arduino',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MesureArduino',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valeur', models.FloatField()),
                ('unite', models.CharField(max_length=10)),
                ('timestamp', models.DateTimeField()),
                ('timestamp_reception', models.DateTimeField(auto_now_add=True, help_text='Timestamp de réception par le serveur')),
                ('qualite_donnee', models.CharField(choices=[('excellente', 'Excellente'), ('bonne', 'Bonne'), ('moyenne', 'Moyenne'), ('faible', 'Faible'), ('douteuse', 'Douteuse'), ('invalide', 'Invalide'), ('interpolee', 'Interpolée'), ('derniere_connue', 'Dernière valeur connue')], default='bonne', max_length=20)),
                ('source_donnee', models.CharField(choices=[('capteur_reel', 'Capteur réel'), ('interpolation', 'Interpolation automatique'), ('derniere_valeur', 'Dernière valeur connue'), ('valeur_defaut', 'Valeur par défaut')], default='capteur_reel', max_length=20)),
                ('tension_batterie', models.FloatField(blank=True, help_text='Tension batterie au moment de la mesure', null=True)),
                ('niveau_signal_wifi', models.IntegerField(blank=True, help_text='Niveau signal Wi-Fi', null=True)),
                ('temperature_cpu', models.FloatField(blank=True, help_text='Température CPU Arduino', null=True)),
                ('uptime_secondes', models.PositiveIntegerField(blank=True, help_text='Temps de fonctionnement', null=True)),
                ('est_valide', models.BooleanField(default=True)),
                ('erreur_validation', models.TextField(blank=True, help_text="Message d'erreur si invalide")),
                ('donnees_brutes', models.JSONField(default=dict, help_text='Données JSON brutes reçues')),
                ('commentaires', models.TextField(blank=True)),
                ('capteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mesures_arduino', to='erosion.capteurarduino')),
            ],
            options={
                'verbose_name': 'Mesure Arduino',
                'verbose_name_plural': 'Mesures Arduino',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='capteurarduino',
            index=models.Index(fields=['adresse_mac'], name='erosion_cap_adresse_593ac3_idx'),
        ),
        migrations.AddIndex(
            model_name='capteurarduino',
            index=models.Index(fields=['zone', 'type_capteur'], name='erosion_cap_zone_id_395ae1_idx'),
        ),
        migrations.AddIndex(
            model_name='capteurarduino',
            index=models.Index(fields=['etat', 'actif'], name='erosion_cap_etat_09ad9a_idx'),
        ),
        migrations.AddIndex(
            model_name='capteurarduino',
            index=models.Index(fields=['date_derniere_communication'], name='erosion_cap_date_de_f3a0a5_idx'),
        ),
        migrations.AddIndex(
            model_name='donneesmanquantes',
            index=models.Index(fields=['capteur', 'date_detection'], name='erosion_don_capteur_a67147_idx'),
        ),
        migrations.AddIndex(
            model_name='donneesmanquantes',
            index=models.Index(fields=['est_completee'], name='erosion_don_est_com_534a2b_idx'),
        ),
        migrations.AddIndex(
            model_name='donneesmanquantes',
            index=models.Index(fields=['periode_debut', 'periode_fin'], name='erosion_don_periode_136d59_idx'),
        ),
        migrations.AddIndex(
            model_name='logcapteurarduino',
            index=models.Index(fields=['capteur', 'timestamp'], name='erosion_log_capteur_f61f1b_idx'),
        ),
        migrations.AddIndex(
            model_name='logcapteurarduino',
            index=models.Index(fields=['type_evenement', 'niveau'], name='erosion_log_type_ev_d6dd85_idx'),
        ),
        migrations.AddIndex(
            model_name='logcapteurarduino',
            index=models.Index(fields=['timestamp'], name='erosion_log_timesta_de4dc3_idx'),
        ),
        migrations.AddIndex(
            model_name='mesurearduino',
            index=models.Index(fields=['capteur', 'timestamp'], name='erosion_mes_capteur_6d3fec_idx'),
        ),
        migrations.AddIndex(
            model_name='mesurearduino',
            index=models.Index(fields=['timestamp'], name='erosion_mes_timesta_e63a78_idx'),
        ),
        migrations.AddIndex(
            model_name='mesurearduino',
            index=models.Index(fields=['qualite_donnee', 'est_valide'], name='erosion_mes_qualite_b0fd4b_idx'),
        ),
        migrations.AddIndex(
            model_name='mesurearduino',
            index=models.Index(fields=['source_donnee'], name='erosion_mes_source__1e9966_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mesurearduino',
            unique_together={('capteur', 'timestamp')},
        ),
    ]
