# Generated by Django 5.2.7 on 2025-10-10 06:49

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('erosion', '0003_remove_capteur_position_json_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CleAPI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('open_meteo', 'Open-Meteo'), ('open_elevation', 'Open-Elevation'), ('noaa_tides', 'NOAA Tides and Currents'), ('nasa_gibs', 'NASA GIBS'), ('sentinel_hub', 'Sentinel Hub'), ('copernicus_marine', 'Copernicus Marine'), ('copernicus_land', 'Copernicus Land Monitoring')], max_length=50, unique=True)),
                ('cle_api', models.TextField(help_text='Clé API chiffrée')),
                ('url_base', models.URLField(help_text="URL de base de l'API")),
                ('limite_requetes_heure', models.PositiveIntegerField(default=1000)),
                ('limite_requetes_jour', models.PositiveIntegerField(default=10000)),
                ('actif', models.BooleanField(default=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_modification', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Clé API',
                'verbose_name_plural': 'Clés API',
            },
        ),
        migrations.CreateModel(
            name='DonneesEnvironnementales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_collecte', models.DateTimeField(auto_now_add=True)),
                ('periode_debut', models.DateTimeField()),
                ('periode_fin', models.DateTimeField()),
                ('temperature_moyenne', models.FloatField(blank=True, help_text='°C', null=True)),
                ('temperature_min', models.FloatField(blank=True, help_text='°C', null=True)),
                ('temperature_max', models.FloatField(blank=True, help_text='°C', null=True)),
                ('humidite_relative', models.FloatField(blank=True, help_text='%', null=True)),
                ('vitesse_vent', models.FloatField(blank=True, help_text='m/s', null=True)),
                ('direction_vent', models.FloatField(blank=True, help_text='degrés', null=True)),
                ('precipitation_totale', models.FloatField(blank=True, help_text='mm', null=True)),
                ('pression_atmospherique', models.FloatField(blank=True, help_text='hPa', null=True)),
                ('niveau_mer_moyen', models.FloatField(blank=True, help_text='mètres', null=True)),
                ('niveau_mer_min', models.FloatField(blank=True, help_text='mètres', null=True)),
                ('niveau_mer_max', models.FloatField(blank=True, help_text='mètres', null=True)),
                ('amplitude_maree', models.FloatField(blank=True, help_text='mètres', null=True)),
                ('vitesse_courant', models.FloatField(blank=True, help_text='m/s', null=True)),
                ('direction_courant', models.FloatField(blank=True, help_text='degrés', null=True)),
                ('salinite_surface', models.FloatField(blank=True, help_text='PSU', null=True)),
                ('temperature_eau', models.FloatField(blank=True, help_text='°C', null=True)),
                ('elevation_moyenne', models.FloatField(blank=True, help_text='mètres', null=True)),
                ('elevation_min', models.FloatField(blank=True, help_text='mètres', null=True)),
                ('elevation_max', models.FloatField(blank=True, help_text='mètres', null=True)),
                ('pente_moyenne', models.FloatField(blank=True, help_text='degrés', null=True)),
                ('donnees_completes', models.JSONField(default=dict, help_text='Toutes les données consolidées')),
                ('indice_erosion_potentiel', models.FloatField(blank=True, help_text='Indice calculé', null=True)),
                ('facteurs_risque', models.JSONField(default=list, help_text='Facteurs de risque identifiés')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='donnees_environnementales', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Données environnementales',
                'verbose_name_plural': 'Données environnementales',
                'ordering': ['-date_collecte'],
            },
        ),
        migrations.CreateModel(
            name='AnalyseErosion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_analyse', models.DateTimeField(auto_now_add=True)),
                ('horizon_prediction_jours', models.PositiveIntegerField(default=30)),
                ('modele_utilise', models.CharField(default='Modèle enrichi multi-facteurs', max_length=100)),
                ('taux_erosion_predit', models.FloatField(help_text='mètres/an')),
                ('confiance_prediction', models.FloatField(help_text='%', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('facteur_meteo', models.FloatField(blank=True, help_text='Contribution météo', null=True)),
                ('facteur_marin', models.FloatField(blank=True, help_text='Contribution marine', null=True)),
                ('facteur_topographique', models.FloatField(blank=True, help_text='Contribution topographie', null=True)),
                ('facteur_substrat', models.FloatField(blank=True, help_text='Contribution substrat', null=True)),
                ('recommandations', models.JSONField(default=list, help_text='Recommandations générées')),
                ('niveau_urgence', models.CharField(choices=[('faible', 'Faible'), ('modere', 'Modéré'), ('eleve', 'Élevé'), ('critique', 'Critique')], default='faible', max_length=20)),
                ('calculs_detaille', models.JSONField(default=dict, help_text='Calculs détaillés')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analyses_erosion', to='erosion.zone')),
                ('donnees_environnementales', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='erosion.donneesenvironnementales')),
            ],
            options={
                'verbose_name': "Analyse d'érosion",
                'verbose_name_plural': "Analyses d'érosion",
                'ordering': ['-date_analyse'],
            },
        ),
        migrations.CreateModel(
            name='LogAPICall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_api', models.CharField(max_length=50)),
                ('endpoint_appele', models.URLField()),
                ('parametres_requete', models.JSONField(default=dict)),
                ('statut_reponse', models.CharField(choices=[('succes', 'Succès'), ('echec', 'Échec'), ('timeout', 'Timeout'), ('quota_depasse', 'Quota dépassé')], max_length=20)),
                ('code_reponse_http', models.PositiveIntegerField(blank=True, null=True)),
                ('temps_reponse_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('donnees_recues', models.JSONField(blank=True, default=dict)),
                ('message_erreur', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('utilisateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log API',
                'verbose_name_plural': 'Logs API',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DonneesCartographiques',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_donnees', models.CharField(choices=[('satellite', 'Image satellite'), ('substrat', 'Substrat/Couverture terrestre'), ('hydrographie', 'Hydrographie'), ('topographie', 'Topographie'), ('bathymetrie', 'Bathymétrie')], max_length=20)),
                ('source', models.CharField(help_text='Source des données (ex: NASA GIBS, Copernicus)', max_length=100)),
                ('resolution', models.FloatField(help_text='Résolution en mètres')),
                ('format_donnees', models.CharField(default='geojson', max_length=20)),
                ('geometrie_couverte', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('donnees_brutes', models.JSONField(default=dict)),
                ('date_acquisition', models.DateTimeField()),
                ('date_traitement', models.DateTimeField(auto_now_add=True)),
                ('qualite_donnees', models.CharField(choices=[('excellente', 'Excellente'), ('bonne', 'Bonne'), ('moyenne', 'Moyenne'), ('faible', 'Faible')], default='bonne', max_length=20)),
                ('fichier_raster', models.FileField(blank=True, null=True, upload_to='cartographie/raster/')),
                ('fichier_vectoriel', models.FileField(blank=True, null=True, upload_to='cartographie/vectoriel/')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='donnees_cartographiques', to='erosion.zone')),
            ],
            options={
                'verbose_name': 'Données cartographiques',
                'verbose_name_plural': 'Données cartographiques',
                'ordering': ['-date_acquisition'],
                'indexes': [models.Index(fields=['zone', 'type_donnees'], name='erosion_don_zone_id_959e2d_idx'), models.Index(fields=['date_acquisition'], name='erosion_don_date_ac_765a4d_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='donneesenvironnementales',
            index=models.Index(fields=['zone', 'date_collecte'], name='erosion_don_zone_id_912132_idx'),
        ),
        migrations.AddIndex(
            model_name='donneesenvironnementales',
            index=models.Index(fields=['periode_debut', 'periode_fin'], name='erosion_don_periode_3badc6_idx'),
        ),
        migrations.AddIndex(
            model_name='logapicall',
            index=models.Index(fields=['service_api', 'timestamp'], name='erosion_log_service_79ef5b_idx'),
        ),
        migrations.AddIndex(
            model_name='logapicall',
            index=models.Index(fields=['statut_reponse'], name='erosion_log_statut__3904ea_idx'),
        ),
    ]
