================================================================================
                    R√âSUM√â BACKEND - SURVEILLANCE √âROSION C√îTI√àRE
================================================================================

üìã DESCRIPTION G√âN√âRALE
================================================================================

Ce backend est une API REST professionnelle d√©velopp√©e avec Django REST Framework 
pour la surveillance et la pr√©diction de l'√©rosion c√¥ti√®re. Il utilise des 
donn√©es g√©ospatiales PostGIS et int√®gre des capteurs Arduino pour la collecte 
automatique de donn√©es environnementales.

üèóÔ∏è ARCHITECTURE TECHNIQUE
================================================================================

STACK TECHNIQUE :
- Backend : Django 5.2.7 + Django REST Framework
- Base de donn√©es : PostgreSQL avec extension PostGIS (donn√©es g√©ospatiales)
- Authentification : JWT (SimpleJWT)
- T√¢ches asynchrones : Celery + Redis
- Documentation API : Swagger/OpenAPI (drf-spectacular)
- Format g√©ospatial : GeoJSON
- Capteurs IoT : Arduino (r√©ception de donn√©es en temps r√©el)

STRUCTURE DU PROJET :
```
backend/
‚îú‚îÄ‚îÄ backend/                 # Configuration Django principale
‚îÇ   ‚îú‚îÄ‚îÄ settings.py         # Configuration compl√®te avec PostGIS
‚îÇ   ‚îú‚îÄ‚îÄ urls.py            # URLs principales
‚îÇ   ‚îú‚îÄ‚îÄ celery.py          # Configuration Celery
‚îÇ   ‚îî‚îÄ‚îÄ celery_beat_schedule.py  # T√¢ches p√©riodiques
‚îú‚îÄ‚îÄ erosion/                # Application principale
‚îÇ   ‚îú‚îÄ‚îÄ models.py          # Mod√®les de donn√©es (PostGIS)
‚îÇ   ‚îú‚îÄ‚îÄ serializers.py     # S√©rialiseurs DRF
‚îÇ   ‚îú‚îÄ‚îÄ views.py           # Vues API principales
‚îÇ   ‚îú‚îÄ‚îÄ views_arduino.py   # Vues pour capteurs Arduino
‚îÇ   ‚îú‚îÄ‚îÄ views_enrichies.py # Vues pour donn√©es enrichies
‚îÇ   ‚îú‚îÄ‚îÄ views_evenements.py # Vues pour √©v√©nements climatiques
‚îÇ   ‚îú‚îÄ‚îÄ urls.py            # URLs de l'API
‚îÇ   ‚îú‚îÄ‚îÄ filters.py         # Filtres Django
‚îÇ   ‚îú‚îÄ‚îÄ permissions.py     # Permissions personnalis√©es
‚îÇ   ‚îú‚îÄ‚îÄ signals.py         # Signaux Django
‚îÇ   ‚îú‚îÄ‚îÄ tasks.py           # T√¢ches Celery
‚îÇ   ‚îú‚îÄ‚îÄ services.py        # Services m√©tier
‚îÇ   ‚îî‚îÄ‚îÄ management/commands/  # Commandes Django personnalis√©es
‚îú‚îÄ‚îÄ requirements.txt       # D√©pendances Python
‚îú‚îÄ‚îÄ env.example           # Variables d'environnement
‚îî‚îÄ‚îÄ README.md             # Documentation compl√®te
```

üîß INSTALLATION ET CONFIGURATION
================================================================================

PR√âREQUIS :
- Python 3.12+
- PostgreSQL avec PostGIS install√© localement
- Redis (pour Celery)
- Miniconda (pour GDAL sur Windows)

√âTAPES D'INSTALLATION :

1. Installation des d√©pendances :
```bash
# Cr√©er environnement virtuel
python -m venv venv
venv\Scripts\activate  # Windows

# Installer les d√©pendances
pip install -r requirements.txt

# Installer GDAL via conda (Windows)
conda install -c conda-forge gdal
```

2. Configuration PostgreSQL :
```bash
# Cr√©er la base de donn√©es
createdb -U postgres erosion_db
psql -U postgres -d erosion_db -c "CREATE EXTENSION postgis;"
```

3. Configuration variables d'environnement :
```env
DATABASE_NAME=erosion_db
DATABASE_USER=postgres
DATABASE_PASSWORD=votre_mot_de_passe
DATABASE_HOST=localhost
DATABASE_PORT=5432
SECRET_KEY=votre_cl√©_secr√®te
DEBUG=True
```

4. Initialisation :
```bash
python manage.py migrate
python manage.py createsuperuser
python manage.py simulate_data  # G√©n√©rer donn√©es de test
```

üöÄ D√âMARRAGE DU SERVEUR
================================================================================

D√âVELOPPEMENT LOCAL :
```bash
# Serveur Django
python manage.py runserver

# Celery Worker (terminal s√©par√©)
celery -A backend worker --loglevel=info

# Celery Beat (terminal s√©par√©)
celery -A backend beat --loglevel=info
```

PRODUCTION :
```bash
pip install gunicorn
gunicorn backend.wsgi:application --bind 0.0.0.0:8000
```

üì° ENDPOINTS API PRINCIPAUX
================================================================================

AUTHENTIFICATION :
- POST /api/auth/login/ - Connexion (obtenir token JWT)
- POST /api/auth/refresh/ - Rafra√Æchir le token

ZONES G√âOGRAPHIQUES :
- GET /api/zones/ - Liste des zones (GeoJSON)
- POST /api/zones/ - Cr√©er une zone
- GET /api/zones/{id}/statistiques/ - Statistiques d'une zone

CAPTEURS ARDUINO :
- GET /api/capteurs-arduino/ - Liste des capteurs Arduino
- POST /api/capteurs-arduino/ - Cr√©er un capteur
- GET /api/mesures-arduino/ - Mesures des capteurs
- POST /api/arduino/recevoir-donnees/ - R√©ception donn√©es Arduino

PR√âDICTIONS ET ALERTES :
- GET /api/predictions/ - Liste des pr√©dictions
- GET /api/alertes/ - Liste des alertes
- POST /api/alertes/{id}/resoudre/ - Marquer alerte comme r√©solue

DOCUMENTATION :
- GET /api/docs/ - Interface Swagger UI
- GET /api/redoc/ - Documentation ReDoc

üîê AUTHENTIFICATION JWT
================================================================================

UTILISATION :
1. Obtenir un token :
```bash
curl -X POST http://localhost:8000/api/auth/login/ \
  -H "Content-Type: application/json" \
  -d '{"username": "admin", "password": "admin"}'
```

2. Utiliser le token :
```bash
curl -H "Authorization: Bearer <votre_token>" \
  http://localhost:8000/api/zones/
```

R√îLES UTILISATEURS :
- Admin : Acc√®s complet √† tous les endpoints
- Scientifique : Lecture/√©criture des donn√©es et pr√©dictions
- Technicien : Gestion des capteurs et mesures
- Observateur : Lecture seule des donn√©es publiques

üìä MOD√àLES DE DONN√âES PRINCIPAUX
================================================================================

UTILISATEUR :
- R√¥les : admin, scientifique, technicien, observateur
- Informations personnelles et organisationnelles

ZONE :
- G√©om√©trie polygonale PostGIS (SRID 4326)
- Niveau de risque : faible, mod√©r√©, √©lev√©, critique
- Superficie et description

CAPTEUR ARDUINO :
- Position g√©ographique PostGIS (SRID 4326)
- Types : temp√©rature, humidit√©, pression, etc.
- √âtat : actif, maintenance, d√©faillant
- Fr√©quence de mesure et pr√©cision

MESURE ARDUINO :
- Valeur num√©rique avec unit√©
- Timestamp et qualit√© des donn√©es
- Commentaires optionnels

PR√âDICTION :
- Taux d'√©rosion pr√©dit (m/an)
- Horizon de pr√©diction (jours)
- Niveau de confiance (%)
- Mod√®le utilis√© et param√®tres

ALERTE :
- Niveaux : info, attention, critique, urgence
- Statut : active, r√©solue
- Zone et capteur concern√©s

ü§ñ T√ÇCHES AUTOMATIQUES (CELERY)
================================================================================

G√âN√âRATION DE MESURES :
- Ex√©cut√©e selon la fr√©quence des capteurs
- G√©n√®re des valeurs r√©alistes selon le type de capteur

NETTOYAGE DES DONN√âES :
- Supprime les mesures de plus d'un an
- Optimise les performances de la base de donn√©es

SURVEILLANCE DES CAPTEURS :
- D√©tecte les capteurs d√©faillants
- G√©n√®re des alertes automatiques

FUSION DE DONN√âES :
- Int√®gre des donn√©es externes (m√©t√©o, mar√©es)
- Enrichit les pr√©dictions avec des donn√©es contextuelles

üó∫Ô∏è DONN√âES G√âOSPATIALES
================================================================================

FORMAT GEOJSON :
L'API retourne les donn√©es g√©ospatiales au format GeoJSON standard :
```json
{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "geometry": {
        "type": "Polygon",
        "coordinates": [[[-1.2, 44.6], [-1.0, 44.6], [-1.0, 44.8], [-1.2, 44.8], [-1.2, 44.6]]]
      },
      "properties": {
        "nom": "C√¥te Atlantique - Arcachon",
        "niveau_risque": "modere",
        "superficie_km2": 150.5
      }
    }
  ]
}
```

REQU√äTES SPATIALES POSTGIS :
- Intersection de g√©om√©tries
- Calcul de distances
- Analyse de proximit√©
- Requ√™tes temporelles-spatiales

üîß CONFIGURATION AVANC√âE
================================================================================

VARIABLES D'ENVIRONNEMENT IMPORTANTES :
```env
# Base de donn√©es
DATABASE_NAME=erosion_db
DATABASE_USER=postgres
DATABASE_PASSWORD=password
DATABASE_HOST=localhost
DATABASE_PORT=5432

# Django
SECRET_KEY=your-secret-key
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# JWT
JWT_ACCESS_TOKEN_LIFETIME=60
JWT_REFRESH_TOKEN_LIFETIME=1440

# Celery
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# GDAL (Windows avec conda)
GDAL_DATA=C:\Users\user\miniconda3\Library\share\gdal
PROJ_LIB=C:\Users\user\miniconda3\Library\share\proj
GDAL_LIBRARY_PATH=C:\Users\user\miniconda3\Library\bin\gdal.dll
```

PERMISSIONS GRANULAIRES :
- Contr√¥le d'acc√®s par r√¥le utilisateur
- Permissions sp√©cifiques par endpoint
- Audit trail complet des actions

üìà MONITORING ET LOGS
================================================================================

LOGS DJANGO :
- Logs d'application dans fichiers d√©di√©s
- Tra√ßabilit√© des actions utilisateurs
- Monitoring des performances API

M√âTRIQUES IMPORTANTES :
- Nombre de zones surveill√©es
- Nombre de capteurs actifs
- Volume de donn√©es collect√©es
- Temps de r√©ponse API
- Erreurs et exceptions

üß™ TESTS ET QUALIT√â
================================================================================

TESTS UNITAIRES :
```bash
# Ex√©cuter tous les tests
python manage.py test

# Tests sp√©cifiques
python manage.py test erosion.tests.test_api
python manage.py test erosion.tests.test_models
```

TESTS D'INT√âGRATION :
```bash
# Test de l'API compl√®te
python manage.py test erosion.tests.test_integration
```

üîí S√âCURIT√â
================================================================================

BONNES PRATIQUES IMPL√âMENT√âES :
- Variables d'environnement pour les secrets
- Authentification JWT avec expiration
- Permissions granulaires par r√¥le
- Validation des donn√©es d'entr√©e
- Protection CORS configur√©e

PRODUCTION :
- HTTPS obligatoire
- Rate limiting
- Logs de s√©curit√©
- Sauvegarde r√©guli√®re des donn√©es

üìû COMMANDES UTILES
================================================================================

D√âVELOPPEMENT :
```bash
# G√©n√©rer des donn√©es de test
python manage.py simulate_data

# Cr√©er des migrations
python manage.py makemigrations

# Appliquer les migrations
python manage.py migrate

# Collecter les fichiers statiques
python manage.py collectstatic

# Shell Django
python manage.py shell
```

MAINTENANCE :
```bash
# Nettoyer les donn√©es anciennes
python manage.py cleanup_old_data

# Synchroniser les capteurs
python manage.py sync_sensors

# G√©n√©rer un rapport
python manage.py generate_report
```

üéØ POINTS CL√âS POUR G√âRER UN BACKEND SIMILAIRE
================================================================================

1. ARCHITECTURE :
   - Utiliser Django REST Framework pour les APIs
   - PostGIS pour les donn√©es g√©ospatiales
   - Celery pour les t√¢ches asynchrones
   - JWT pour l'authentification

2. DONN√âES G√âOSPATIALES :
   - Toujours utiliser SRID 4326 (WGS84)
   - Retourner les donn√©es en GeoJSON
   - Utiliser les fonctions PostGIS pour les requ√™tes spatiales

3. CAPTEURS IoT :
   - Cr√©er des endpoints d√©di√©s pour la r√©ception de donn√©es
   - Impl√©menter la validation des donn√©es
   - G√©rer les donn√©es manquantes et les erreurs

4. S√âCURIT√â :
   - Toujours utiliser HTTPS en production
   - Impl√©menter des permissions granulaires
   - Logger toutes les actions importantes

5. PERFORMANCE :
   - Utiliser la pagination pour les grandes listes
   - Impl√©menter des filtres efficaces
   - Nettoyer r√©guli√®rement les donn√©es anciennes

6. MONITORING :
   - Surveiller les performances de l'API
   - Logger les erreurs et exceptions
   - Monitorer l'√©tat des capteurs

7. D√âPLOIEMENT :
   - Utiliser des variables d'environnement
   - Configurer un serveur WSGI (Gunicorn)
   - Utiliser un reverse proxy (Nginx)

üìö RESSOURCES UTILES
================================================================================

DOCUMENTATION :
- Django REST Framework : https://www.django-rest-framework.org/
- PostGIS : https://postgis.net/
- Celery : https://docs.celeryproject.org/
- JWT : https://jwt.io/

OUTILS DE D√âVELOPPEMENT :
- Postman pour tester les APIs
- pgAdmin pour g√©rer PostgreSQL
- Redis Commander pour Redis
- Swagger UI pour la documentation API

COMMANDES DE DEBUGGING :
```bash
# V√©rifier la configuration
python manage.py check

# V√©rifier les migrations
python manage.py showmigrations

# V√©rifier la base de donn√©es
python manage.py dbshell

# V√©rifier les t√¢ches Celery
celery -A backend inspect active
```

================================================================================
                    FIN DU R√âSUM√â BACKEND √âROSION C√îTI√àRE
================================================================================

Ce r√©sum√© couvre tous les aspects essentiels de votre backend. Votre ami peut 
s'en inspirer pour cr√©er et g√©rer son propre backend avec une architecture 
similaire, en adaptant les mod√®les de donn√©es √† ses besoins sp√©cifiques.

Les points cl√©s √† retenir :
- Architecture Django REST Framework + PostGIS
- Authentification JWT s√©curis√©e
- Gestion des donn√©es g√©ospatiales
- Int√©gration de capteurs IoT
- T√¢ches asynchrones avec Celery
- Documentation API automatique
- Monitoring et logs complets
